var packfile = require('../index')
  , idxparse = require('git-packidx-parser')
  , Buffer = require('buffer').Buffer
  , through = require('through')
  , test = require('tape')
  , pack_idx

test('setup', function(assert) {
  idxparse()
    .on('data', function(_d) { pack_idx = _d })
    .on('end', function() { assert.end() })
    .end(TEST_PACK_IDX) 
})

test('works as expected', function(assert) {
  var oid = new Buffer([0xc7, 0x88, 0x5a, 0x6f, 0x16, 0xb9, 0xf0, 0x5a, 0x2e, 0xcd, 0x70, 0x83, 0xc9, 0x0c, 0xe2, 0x46, 0xc1, 0x12, 0x25, 0x3d])
    , pf = packfile(TEST_PACK.length, find_raw, read)


  var loc = pack_idx.find(oid)

  pf.read(loc.offset, loc.next, function(err, data) {
    if(err) throw err
    assert.equal(data.data.toString('utf8'), EXPECT)
    assert.end()
  })


  function find_raw(oid, ready) {
    var bits = pack_idx.find(oid)
    if(!bits) {
      return ready(new Error('no such object'))
    }

    pf.read(bits.offset, bits.next, ready)
  }

  function read(start, end) {
    var stream = through()

    process.nextTick(function() { stream.end(TEST_PACK.slice(start, end)) })

    return stream
  }
}) 
  
  
  
  
  

















var TEST_PACK_IDX = new Buffer("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", 'base64')

var TEST_PACK = new Buffer("", "base64")


var EXPECT = 'module.exports = physical\n\nvar aabb = require(\'aabb-3d\')\n  , THREE = require(\'three\')\n\nfunction physical(avatar, collidables, dimensions, terminal) {\n  return new Physical(avatar, collidables, dimensions, terminal)\n}\n\nfunction Physical(avatar, collidables, dimensions, terminal) {\n  this.avatar = avatar\n  this.terminal = terminal || new THREE.Vector3(30, 5.6, 30)\n  this.dimensions = dimensions = dimensions || [1, 1, 1]\n  this._aabb = aabb([0, 0, 0], dimensions)\n  this.resting = {x: false, y: false, z: false}\n  this.collidables = collidables\n  this.friction = new THREE.Vector3(1, 1, 1)\n\n  this.rotation = this.avatar.rotation\n  this.default_friction = 1\n\n  // default yaw/pitch/roll controls to the avatar\n  this.yaw =\n  this.pitch =\n  this.roll = avatar\n\n  this.forces = new THREE.Vector3(0, 0, 0)\n  this.attractors = []\n  this.acceleration = new THREE.Vector3(0, 0, 0)\n  this.velocity = new THREE.Vector3(0, 0, 0)\n}\n\nvar cons = Physical\n  , proto = cons.prototype\n  , axes = [\'x\', \'y\', \'z\']\n  , abs = Math.abs\n\n// make these *once*, so we\'re not generating\n// garbage for every object in the game.\nvar WORLD_DESIRED = new THREE.Vector3(0, 0, 0)\n  , DESIRED = new THREE.Vector3(0, 0, 0)\n  , START = new THREE.Vector3(0, 0, 0)\n  , END = new THREE.Vector3(0, 0, 0)\n  , DIRECTION = new THREE.Vector3()\n  , LOCAL_ATTRACTOR = new THREE.Vector3()\n  , TOTAL_FORCES = new THREE.Vector3()\n\nproto.applyWorldAcceleration = applyTo(\'acceleration\')\nproto.applyWorldVelocity = applyTo(\'velocity\')\n\nfunction applyTo(which) {\n  return function(world) {\n    var local = this.avatar.worldToLocal(world)\n    this[which].x += local.x\n    this[which].y += local.y\n    this[which].z += local.z\n  }\n}\n\nproto.tick = function(dt) {\n  var forces = this.forces\n    , acceleration = this.acceleration\n    , velocity = this.velocity\n    , terminal = this.terminal\n    , friction = this.friction\n    , desired = DESIRED\n    , world_desired = WORLD_DESIRED\n    , bbox\n    , pcs\n  TOTAL_FORCES.multiplyScalar(0)\n\n  desired.x =\n  desired.y =\n  desired.z =\n  world_desired.x =\n  world_desired.y =\n  world_desired.z = 0\n\n  for(var i = 0; i < this.attractors.length; i++) {\n    var distance_factor = this.avatar.position.distanceToSquared(this.attractors[i])\n    LOCAL_ATTRACTOR.copy(this.attractors[i])\n    LOCAL_ATTRACTOR = this.avatar.worldToLocal(LOCAL_ATTRACTOR)\n\n    DIRECTION.sub(LOCAL_ATTRACTOR, this.avatar.position)\n\n    DIRECTION.divideScalar(DIRECTION.length() * distance_factor)\n    DIRECTION.multiplyScalar(this.attractors[i].mass)\n\n    TOTAL_FORCES.addSelf(DIRECTION)\n  }\n  \n  if(!this.resting.x) {\n    acceleration.x /= 8 * dt\n    acceleration.x += TOTAL_FORCES.x * dt\n    acceleration.x += forces.x * dt\n\n    velocity.x += acceleration.x * dt\n    velocity.x *= friction.x\n\n    if(abs(velocity.x) < terminal.x) {\n      desired.x = (velocity.x * dt)\n    } else if(velocity.x !== 0) {\n      desired.x = (velocity.x / abs(velocity.x)) * terminal.x\n    }\n  } else {\n    acceleration.x = velocity.x = 0\n  }\n  if(!this.resting.y) {\n    acceleration.y /= 8 * dt\n    acceleration.y += TOTAL_FORCES.y * dt\n    acceleration.y += forces.y * dt\n\n    velocity.y += acceleration.y * dt\n    velocity.y *= friction.y\n\n    if(abs(velocity.y) < terminal.y) {\n      desired.y = (velocity.y * dt)\n    } else if(velocity.y !== 0) {\n      desired.y = (velocity.y / abs(velocity.y)) * terminal.y\n    }\n  } else {\n    acceleration.y = velocity.y = 0\n  }\n  if(!this.resting.z) {\n    acceleration.z /= 8 * dt\n    acceleration.z += TOTAL_FORCES.z * dt\n    acceleration.z += forces.z * dt\n\n    velocity.z += acceleration.z * dt\n    velocity.z *= friction.z\n\n    if(abs(velocity.z) < terminal.z) {\n      desired.z = (velocity.z * dt)\n    } else if(velocity.z !== 0) {\n      desired.z = (velocity.z / abs(velocity.z)) * terminal.z\n    }\n  } else {\n    acceleration.z = velocity.z = 0\n  }\n  \n  START.copy(this.avatar.position)\n  this.avatar.translateX(desired.x)\n  this.avatar.translateY(desired.y)\n  this.avatar.translateZ(desired.z)\n  END.copy(this.avatar.position)\n  this.avatar.position.copy(START)\n  world_desired.x = END.x - START.x\n  world_desired.y = END.y - START.y\n  world_desired.z = END.z - START.z\n  this.friction.x =\n  this.friction.y =\n  this.friction.z = this.default_friction\n\n  // run collisions\n  this.resting.x =\n  this.resting.y =\n  this.resting.z = false\n\n  bbox = this.aabb()\n  pcs = this.collidables\n\n  for(var i = 0, len = pcs.length; i < len; ++i) {\n    if(pcs[i] !== this) {\n      pcs[i].collide(this, bbox, world_desired, this.resting)\n    }\n  }\n\n  // apply translation\n  this.avatar.position.x += world_desired.x\n  this.avatar.position.y += world_desired.y\n  this.avatar.position.z += world_desired.z\n}\n\nproto.subjectTo = function(force) {\n  this.forces.x += force[0]\n  this.forces.y += force[1]\n  this.forces.z += force[2]\n  return this\n}\n\nproto.attractTo = function(vector, mass) {\n  vector.mass = mass\n  this.attractors.push(vector)\n}\n\nproto.aabb = function() {\n  return aabb(\n      [this.avatar.position.x, this.avatar.position.y, this.avatar.position.z]\n    , this.dimensions\n  )\n}\n\n// no object -> object collisions for now, thanks\nproto.collide = function(other, bbox, world_vec, resting) {\n  return\n}\n\nproto.atRestX = function() {\n  return this.resting.x\n}\n\nproto.atRestY = function() {\n  return this.resting.y\n}\n\nproto.atRestZ = function() {\n  return this.resting.z\n}\n'
